/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Manufacturer;

import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Inventory.InventoryItem;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Vaccine.Vaccine;
import Business.WorkQueue.FinanceWorkRequest;
import Business.WorkQueue.ManufacturerWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vinay Limbare
 */
public class ApproveOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ApproveOrdersJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    Organization organization;
    Enterprise enterprise;
    Ecosystem system;

    public ApproveOrdersJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, Ecosystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.system = system;
        populateTable();
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) ordersJTable.getModel();
        dtm.setRowCount(0);
        for (WorkRequest request : enterprise.getWorkQueue().getWorkRequestList()) {
            ManufacturerWorkRequest req = (ManufacturerWorkRequest) request;
            Object[] row = new Object[7];
            row[0] = req.getOrderId();
            for (Vaccine v : system.getVaccineDirectory().getVaccineList()) {
                if (v.getVaccineId() == req.getVaccineId()) {
                    row[1] = v.getVaccineName();
                }
            }
            row[2] = req.getVaccineId();
            row[3] = req.getQuantity();
            row[4] = req.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[5] = req;
            row[6] = req.getPaymentStatus();
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ordersJTable = new javax.swing.JTable();
        assignToMeButton = new javax.swing.JButton();
        approveOrder = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        ordersJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Vaccine Name", "Vaccine ID", "Quantity Required", "Approver Name", "Status", "Payment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ordersJTable);

        assignToMeButton.setText("Assign To Me");
        assignToMeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignToMeButtonActionPerformed(evt);
            }
        });

        approveOrder.setText("Approve Order");
        approveOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveOrderActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Manufacturer Page");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backJButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(assignToMeButton)
                                .addGap(45, 45, 45)
                                .addComponent(approveOrder))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 907, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(376, 376, 376)
                        .addComponent(jLabel1)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(backJButton)
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignToMeButton)
                    .addComponent(approveOrder))
                .addContainerGap(113, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignToMeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignToMeButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = ordersJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        if(ordersJTable.getValueAt(selectedRow, 5)== null){
            JOptionPane.showMessageDialog(null, "Already Assigned !!!");
            return;
        }
        ManufacturerWorkRequest request = (ManufacturerWorkRequest) ordersJTable.getValueAt(selectedRow, 5);
        if (ordersJTable.getValueAt(selectedRow, 4) == null) {
            request.setReceiver(account);
            request.setStatus("Pending for approval");
            JOptionPane.showMessageDialog(null, "Request has been assigned");
            populateTable();
        } else {
            JOptionPane.showMessageDialog(null, "Request has been assigned already");
        }
    }//GEN-LAST:event_assignToMeButtonActionPerformed

    private void approveOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveOrderActionPerformed
        // TODO add your handling code here:
        int selectedRow = ordersJTable.getSelectedRow();
        Network n = null;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a order to approve");
            return;
        }
        
        ManufacturerWorkRequest request = (ManufacturerWorkRequest) ordersJTable.getValueAt(selectedRow, 5);
        if (request.getStatus().equals("Approved") || request.getStatus().equals("Rejected")) {
            JOptionPane.showMessageDialog(null, "Order Request already processed");
            return;
        }
        if (request.getReceiver() == null) {
            JOptionPane.showMessageDialog(null, "Request has to be assigned first");
            return;
        }
        if (!(request.getReceiver() == account)) {
            JOptionPane.showMessageDialog(null, "Request has been assigned to another sales rep");
            return;
        }

        for (Network network : system.getNetworkDirectory().getNetworkList()) {
            for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (e == enterprise) {
                    n = network;
                    break;
                }
            }
        }

        for (InventoryItem inventoryItem : n.getInventoryDirectory().getInventoryList()) {
            if (inventoryItem.getVaccine().getVaccineId() == request.getVaccineId()) {
                inventoryItem.setQuantity(inventoryItem.getQuantity() + request.getQuantity());
            }
        }

        FinanceWorkRequest financeWorkRequest = new FinanceWorkRequest();

        float totalBillPrice = 0;
        Vaccine vaccine = null;
        for (Vaccine v : system.getVaccineDirectory().getVaccineList()) {
            if (v.getVaccineId() == request.getVaccineId()) {
                vaccine = v;
            }
        }

        financeWorkRequest.setOrderId(request.getOrderId());
        financeWorkRequest.setItemQuantity(request.getQuantity());
        financeWorkRequest.setTotalPrice(vaccine.getVaccinePrice() * request.getQuantity());
        financeWorkRequest.setVaccine(vaccine);
        financeWorkRequest.setSender(account);
        financeWorkRequest.setStatus("Approved and Shipped");
        financeWorkRequest.setPaymentStatus(request.getPaymentStatus());

        system.getNationalDistributorEnterprise().getWorkQueue().getWorkRequestList().add(financeWorkRequest);
        enterprise.getWorkQueue().getWorkRequestList().add(financeWorkRequest);
        request.setStatus("Approved");
        request.setPaymentStatus("Paid");
        JOptionPane.showMessageDialog(null, "Request processed");

        populateTable();

    }//GEN-LAST:event_approveOrderActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveOrder;
    private javax.swing.JButton assignToMeButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable ordersJTable;
    // End of variables declaration//GEN-END:variables
}
